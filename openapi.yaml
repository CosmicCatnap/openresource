openapi: 3.0.3
info:
  title: Open Resource Application Programming Interface
  description: API Specification for Open Resource
  contact:
    email: cosmiccatnap@gmail.com
  license:
    name: MIT
  version: 0.0.1
externalDocs:
  description: OpenResource
  url: https://openresourcemanager.com
servers:
  - url: https://openresourcemanager.com/api/v1
tags:
  - name: item
    description: Everything about your items
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: location
    description: Access to itemlocation orders
    externalDocs:
      description: Find out more about our location
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /item:
    put:
      tags:
        - item
      summary: Update an existing item
      description: Update an existing item by Id
      operationId: updateitem
      requestBody:
        description: Update an existent item in the location
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          description: Invalid ID supplied
        "404":
          description: item not found
        "422":
          description: Validation exception
      security:
        - itemlocation_auth:
            - write:items
            - read:items
    post:
      tags:
        - item
      summary: Create a new item to the location
      description: Create a new item to the location
      operationId: createitem
      requestBody:
        description: Create a new item in the location
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
        - itemlocation_auth:
            - write:items
            - read:items
  /item/findByStatus:
    get:
      tags:
        - item
      summary: Finds items by status
      description: Multiple status values can be provided with comma separated strings
      operationId: finditemsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/item"
        "400":
          description: Invalid status value
      security:
        - itemlocation_auth:
            - write:items
            - read:items
  /item/findByTags:
    get:
      tags:
        - item
      summary: Finds items by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: finditemsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/item"
        "400":
          description: Invalid tag value
      security:
        - itemlocation_auth:
            - write:items
            - read:items
  /item/{itemId}:
    get:
      tags:
        - item
      summary: Find item by ID
      description: Returns a single item
      operationId: getitemById
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          description: Invalid ID supplied
        "404":
          description: item not found
      security:
        - api_key: []
        - itemlocation_auth:
            - write:items
            - read:items
    post:
      tags:
        - item
      summary: Updates a item in the location with form data
      description: ""
      operationId: updateitemWithForm
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of item that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of item that needs to be updated
          schema:
            type: string
      responses:
        "400":
          description: Invalid input
      security:
        - itemlocation_auth:
            - write:items
            - read:items
    delete:
      tags:
        - item
      summary: Deletes a item
      description: delete a item
      operationId: deleteitem
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: itemId
          in: path
          description: item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid item value
      security:
        - itemlocation_auth:
            - write:items
            - read:items
  /location/inventory:
    get:
      tags:
        - location
      summary: Returns item inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /location/order:
    post:
      tags:
        - location
      summary: Place an order for a item
      description: Place a new order in the location
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /location/order/{orderId}:
    get:
      tags:
        - location
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - location
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the location
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        itemId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    item:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: item status in the location
          enum:
            - available
            - pending
            - sold
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    item:
      description: item object that needs to be added to the location
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/item"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    itemlocation_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://itemlocation3.swagger.io/oauth/authorize
          scopes:
            write:items: modify pets in your account
            read:items: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
